annotation:shrink('/bootstrap':signature(loadSourceFileToContainer(SourcePath,SourceNS,Container)::impred,[SourcePath::'/bootstrap':string,SourceNS::'/bootstrap':string,Container::'/bootstrap':string])).
'/util':behavior(loadSourceFileToContainer(FileName,NS,Container)::impred,!'should assert containerized statements', (simulate(loadSourceFileToContainer(!'foo.ced',!'/bar',!myContainer),[task(readSourceFile(!'foo.ced',!'/bar'),[builtin:loadedStatement(!'foo.ced', (foo(3):-builtin:true),[])],'/bootstrap':list('/bootstrap':pred)),task(assert(S1),_,'/nodalion':voidType),task(assert(S2),_,'/nodalion':voidType)],true),'/bootstrap':true('/containers':containerize((foo(3):-builtin:true)::'/bootstrap':statement,S1::'/bootstrap':statement,!myContainer)),'/bootstrap':true('/containers':containerize((builtin:loadedStatement(!'foo.ced', (foo(3):-builtin:true),[]):-builtin:true)::'/bootstrap':statement,S2::'/bootstrap':statement,!myContainer)))).
'/bootstrap':signature(assert(S)::task('/nodalion':voidType),[S::'/bootstrap':statement]).
'/bootstrap':signature(readSourceFile(FileName,NS)::task('/bootstrap':list('/bootstrap':pred)),[FileName::'/bootstrap':string,NS::'/bootstrap':string]).
annotation:shrink(clause(loadSourceFileToContainer(FileName,NS,Container),conj(task(readSourceFile(FileName,NS),Statements,'/bootstrap':list('/bootstrap':pred)),annotation:shrink(forall(pred('/bootstrap':listMember(builtin:loadedStatement(FileName,Statement,VNs),'/bootstrap':pred,Statements)),conj(assertContainerized(Statement,Container),assertContainerized((builtin:loadedStatement(FileName,Statement,VNs):-builtin:true),Container))))))).
'/bootstrap':signature(assertContainerized(Statement,Container)::impred,[Statement::'/bootstrap':statement,Container::'/bootstrap':string]).
annotation:shrink(clause(assertContainerized(Statement,Container),conj(pred('/containers':containerize(Statement::'/bootstrap':statement,StatementPrime::'/bootstrap':statement,Container)),task(assert(StatementPrime),_,'/nodalion':voidType)))).
